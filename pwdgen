#!/usr/bin/env python
"""Generate a secure 'Correct-Battery-Horse-Staple' style password"""

from __future__ import print_function
import argparse
from passwords import generator

_MAX_WEAK_PWORDS = 100


def is_strong_password(password):
    """Determine if a given string can be used as a strong password"""
    import crack
    try:
        crack.VeryFascistCheck(password)
    except ValueError:
        return False
    return True


def get_parsed_args():
    """Parses cli arguments and retuns them as a dict"""
    parser = argparse.ArgumentParser(description='Secure password generator')
    parser.add_argument('--separator', help='Word separator', default='-', type=str)
    parser.add_argument('--min_length', help='Minimum password length', default=30, type=int)
    parser.add_argument('--max_length', help='Maximum password length', default=100, type=int)
    parser.add_argument('--num_pwords', help='Number of passwords to generate', default=5, type=int)
    return vars(parser.parse_args())


def main():
    """The main function"""
    args = get_parsed_args()
    separator = args['separator']
    max_len = args['max_length']
    min_len = args['min_length']
    num_pwords = args['num_pwords']
    password_generator = generator.Generator(min_len, max_len, separator)
    strong_pwords = []
    num_weak_pwords = 0
    while len(strong_pwords) < num_pwords and num_weak_pwords < _MAX_WEAK_PWORDS:
        generated_password = password_generator.generate()
        if is_strong_password(generated_password):
            strong_pwords.append(generated_password)
        else:
            num_weak_pwords += 1

    if num_weak_pwords >= _MAX_WEAK_PWORDS:
        print("Failed to generate {} strong passwords after {} attempts".format(num_pwords, num_weak_pwords))
        return

    for pword in strong_pwords:
        print("'{}' is a strong, {} character password".format(pword, str(len(str(pword)))))


if __name__ == '__main__':
    main()
